// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i valera/internal/service.AuthService -o auth_service_minimock.go -n AuthServiceMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"
	"valera/models"

	"github.com/gojuno/minimock/v3"
)

// AuthServiceMock implements mm_service.AuthService
type AuthServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcLogin          func(guid string, ip string) (ap1 *models.AuthResponse, err error)
	funcLoginOrigin    string
	inspectFuncLogin   func(guid string, ip string)
	afterLoginCounter  uint64
	beforeLoginCounter uint64
	LoginMock          mAuthServiceMockLogin

	funcRefresh          func(ip string, refreshToken string) (ap1 *models.AuthResponse, err error)
	funcRefreshOrigin    string
	inspectFuncRefresh   func(ip string, refreshToken string)
	afterRefreshCounter  uint64
	beforeRefreshCounter uint64
	RefreshMock          mAuthServiceMockRefresh
}

// NewAuthServiceMock returns a mock for mm_service.AuthService
func NewAuthServiceMock(t minimock.Tester) *AuthServiceMock {
	m := &AuthServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.LoginMock = mAuthServiceMockLogin{mock: m}
	m.LoginMock.callArgs = []*AuthServiceMockLoginParams{}

	m.RefreshMock = mAuthServiceMockRefresh{mock: m}
	m.RefreshMock.callArgs = []*AuthServiceMockRefreshParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAuthServiceMockLogin struct {
	optional           bool
	mock               *AuthServiceMock
	defaultExpectation *AuthServiceMockLoginExpectation
	expectations       []*AuthServiceMockLoginExpectation

	callArgs []*AuthServiceMockLoginParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthServiceMockLoginExpectation specifies expectation struct of the AuthService.Login
type AuthServiceMockLoginExpectation struct {
	mock               *AuthServiceMock
	params             *AuthServiceMockLoginParams
	paramPtrs          *AuthServiceMockLoginParamPtrs
	expectationOrigins AuthServiceMockLoginExpectationOrigins
	results            *AuthServiceMockLoginResults
	returnOrigin       string
	Counter            uint64
}

// AuthServiceMockLoginParams contains parameters of the AuthService.Login
type AuthServiceMockLoginParams struct {
	guid string
	ip   string
}

// AuthServiceMockLoginParamPtrs contains pointers to parameters of the AuthService.Login
type AuthServiceMockLoginParamPtrs struct {
	guid *string
	ip   *string
}

// AuthServiceMockLoginResults contains results of the AuthService.Login
type AuthServiceMockLoginResults struct {
	ap1 *models.AuthResponse
	err error
}

// AuthServiceMockLoginOrigins contains origins of expectations of the AuthService.Login
type AuthServiceMockLoginExpectationOrigins struct {
	origin     string
	originGuid string
	originIp   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmLogin *mAuthServiceMockLogin) Optional() *mAuthServiceMockLogin {
	mmLogin.optional = true
	return mmLogin
}

// Expect sets up expected params for AuthService.Login
func (mmLogin *mAuthServiceMockLogin) Expect(guid string, ip string) *mAuthServiceMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("AuthServiceMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &AuthServiceMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.paramPtrs != nil {
		mmLogin.mock.t.Fatalf("AuthServiceMock.Login mock is already set by ExpectParams functions")
	}

	mmLogin.defaultExpectation.params = &AuthServiceMockLoginParams{guid, ip}
	mmLogin.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmLogin.expectations {
		if minimock.Equal(e.params, mmLogin.defaultExpectation.params) {
			mmLogin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLogin.defaultExpectation.params)
		}
	}

	return mmLogin
}

// ExpectGuidParam1 sets up expected param guid for AuthService.Login
func (mmLogin *mAuthServiceMockLogin) ExpectGuidParam1(guid string) *mAuthServiceMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("AuthServiceMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &AuthServiceMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("AuthServiceMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &AuthServiceMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.guid = &guid
	mmLogin.defaultExpectation.expectationOrigins.originGuid = minimock.CallerInfo(1)

	return mmLogin
}

// ExpectIpParam2 sets up expected param ip for AuthService.Login
func (mmLogin *mAuthServiceMockLogin) ExpectIpParam2(ip string) *mAuthServiceMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("AuthServiceMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &AuthServiceMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("AuthServiceMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &AuthServiceMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.ip = &ip
	mmLogin.defaultExpectation.expectationOrigins.originIp = minimock.CallerInfo(1)

	return mmLogin
}

// Inspect accepts an inspector function that has same arguments as the AuthService.Login
func (mmLogin *mAuthServiceMockLogin) Inspect(f func(guid string, ip string)) *mAuthServiceMockLogin {
	if mmLogin.mock.inspectFuncLogin != nil {
		mmLogin.mock.t.Fatalf("Inspect function is already set for AuthServiceMock.Login")
	}

	mmLogin.mock.inspectFuncLogin = f

	return mmLogin
}

// Return sets up results that will be returned by AuthService.Login
func (mmLogin *mAuthServiceMockLogin) Return(ap1 *models.AuthResponse, err error) *AuthServiceMock {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("AuthServiceMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &AuthServiceMockLoginExpectation{mock: mmLogin.mock}
	}
	mmLogin.defaultExpectation.results = &AuthServiceMockLoginResults{ap1, err}
	mmLogin.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmLogin.mock
}

// Set uses given function f to mock the AuthService.Login method
func (mmLogin *mAuthServiceMockLogin) Set(f func(guid string, ip string) (ap1 *models.AuthResponse, err error)) *AuthServiceMock {
	if mmLogin.defaultExpectation != nil {
		mmLogin.mock.t.Fatalf("Default expectation is already set for the AuthService.Login method")
	}

	if len(mmLogin.expectations) > 0 {
		mmLogin.mock.t.Fatalf("Some expectations are already set for the AuthService.Login method")
	}

	mmLogin.mock.funcLogin = f
	mmLogin.mock.funcLoginOrigin = minimock.CallerInfo(1)
	return mmLogin.mock
}

// When sets expectation for the AuthService.Login which will trigger the result defined by the following
// Then helper
func (mmLogin *mAuthServiceMockLogin) When(guid string, ip string) *AuthServiceMockLoginExpectation {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("AuthServiceMock.Login mock is already set by Set")
	}

	expectation := &AuthServiceMockLoginExpectation{
		mock:               mmLogin.mock,
		params:             &AuthServiceMockLoginParams{guid, ip},
		expectationOrigins: AuthServiceMockLoginExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmLogin.expectations = append(mmLogin.expectations, expectation)
	return expectation
}

// Then sets up AuthService.Login return parameters for the expectation previously defined by the When method
func (e *AuthServiceMockLoginExpectation) Then(ap1 *models.AuthResponse, err error) *AuthServiceMock {
	e.results = &AuthServiceMockLoginResults{ap1, err}
	return e.mock
}

// Times sets number of times AuthService.Login should be invoked
func (mmLogin *mAuthServiceMockLogin) Times(n uint64) *mAuthServiceMockLogin {
	if n == 0 {
		mmLogin.mock.t.Fatalf("Times of AuthServiceMock.Login mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmLogin.expectedInvocations, n)
	mmLogin.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmLogin
}

func (mmLogin *mAuthServiceMockLogin) invocationsDone() bool {
	if len(mmLogin.expectations) == 0 && mmLogin.defaultExpectation == nil && mmLogin.mock.funcLogin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmLogin.mock.afterLoginCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmLogin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Login implements mm_service.AuthService
func (mmLogin *AuthServiceMock) Login(guid string, ip string) (ap1 *models.AuthResponse, err error) {
	mm_atomic.AddUint64(&mmLogin.beforeLoginCounter, 1)
	defer mm_atomic.AddUint64(&mmLogin.afterLoginCounter, 1)

	mmLogin.t.Helper()

	if mmLogin.inspectFuncLogin != nil {
		mmLogin.inspectFuncLogin(guid, ip)
	}

	mm_params := AuthServiceMockLoginParams{guid, ip}

	// Record call args
	mmLogin.LoginMock.mutex.Lock()
	mmLogin.LoginMock.callArgs = append(mmLogin.LoginMock.callArgs, &mm_params)
	mmLogin.LoginMock.mutex.Unlock()

	for _, e := range mmLogin.LoginMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmLogin.LoginMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLogin.LoginMock.defaultExpectation.Counter, 1)
		mm_want := mmLogin.LoginMock.defaultExpectation.params
		mm_want_ptrs := mmLogin.LoginMock.defaultExpectation.paramPtrs

		mm_got := AuthServiceMockLoginParams{guid, ip}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.guid != nil && !minimock.Equal(*mm_want_ptrs.guid, mm_got.guid) {
				mmLogin.t.Errorf("AuthServiceMock.Login got unexpected parameter guid, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originGuid, *mm_want_ptrs.guid, mm_got.guid, minimock.Diff(*mm_want_ptrs.guid, mm_got.guid))
			}

			if mm_want_ptrs.ip != nil && !minimock.Equal(*mm_want_ptrs.ip, mm_got.ip) {
				mmLogin.t.Errorf("AuthServiceMock.Login got unexpected parameter ip, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originIp, *mm_want_ptrs.ip, mm_got.ip, minimock.Diff(*mm_want_ptrs.ip, mm_got.ip))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLogin.t.Errorf("AuthServiceMock.Login got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmLogin.LoginMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLogin.LoginMock.defaultExpectation.results
		if mm_results == nil {
			mmLogin.t.Fatal("No results are set for the AuthServiceMock.Login")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmLogin.funcLogin != nil {
		return mmLogin.funcLogin(guid, ip)
	}
	mmLogin.t.Fatalf("Unexpected call to AuthServiceMock.Login. %v %v", guid, ip)
	return
}

// LoginAfterCounter returns a count of finished AuthServiceMock.Login invocations
func (mmLogin *AuthServiceMock) LoginAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogin.afterLoginCounter)
}

// LoginBeforeCounter returns a count of AuthServiceMock.Login invocations
func (mmLogin *AuthServiceMock) LoginBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogin.beforeLoginCounter)
}

// Calls returns a list of arguments used in each call to AuthServiceMock.Login.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLogin *mAuthServiceMockLogin) Calls() []*AuthServiceMockLoginParams {
	mmLogin.mutex.RLock()

	argCopy := make([]*AuthServiceMockLoginParams, len(mmLogin.callArgs))
	copy(argCopy, mmLogin.callArgs)

	mmLogin.mutex.RUnlock()

	return argCopy
}

// MinimockLoginDone returns true if the count of the Login invocations corresponds
// the number of defined expectations
func (m *AuthServiceMock) MinimockLoginDone() bool {
	if m.LoginMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.LoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.LoginMock.invocationsDone()
}

// MinimockLoginInspect logs each unmet expectation
func (m *AuthServiceMock) MinimockLoginInspect() {
	for _, e := range m.LoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthServiceMock.Login at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterLoginCounter := mm_atomic.LoadUint64(&m.afterLoginCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.LoginMock.defaultExpectation != nil && afterLoginCounter < 1 {
		if m.LoginMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthServiceMock.Login at\n%s", m.LoginMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthServiceMock.Login at\n%s with params: %#v", m.LoginMock.defaultExpectation.expectationOrigins.origin, *m.LoginMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLogin != nil && afterLoginCounter < 1 {
		m.t.Errorf("Expected call to AuthServiceMock.Login at\n%s", m.funcLoginOrigin)
	}

	if !m.LoginMock.invocationsDone() && afterLoginCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthServiceMock.Login at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.LoginMock.expectedInvocations), m.LoginMock.expectedInvocationsOrigin, afterLoginCounter)
	}
}

type mAuthServiceMockRefresh struct {
	optional           bool
	mock               *AuthServiceMock
	defaultExpectation *AuthServiceMockRefreshExpectation
	expectations       []*AuthServiceMockRefreshExpectation

	callArgs []*AuthServiceMockRefreshParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthServiceMockRefreshExpectation specifies expectation struct of the AuthService.Refresh
type AuthServiceMockRefreshExpectation struct {
	mock               *AuthServiceMock
	params             *AuthServiceMockRefreshParams
	paramPtrs          *AuthServiceMockRefreshParamPtrs
	expectationOrigins AuthServiceMockRefreshExpectationOrigins
	results            *AuthServiceMockRefreshResults
	returnOrigin       string
	Counter            uint64
}

// AuthServiceMockRefreshParams contains parameters of the AuthService.Refresh
type AuthServiceMockRefreshParams struct {
	ip           string
	refreshToken string
}

// AuthServiceMockRefreshParamPtrs contains pointers to parameters of the AuthService.Refresh
type AuthServiceMockRefreshParamPtrs struct {
	ip           *string
	refreshToken *string
}

// AuthServiceMockRefreshResults contains results of the AuthService.Refresh
type AuthServiceMockRefreshResults struct {
	ap1 *models.AuthResponse
	err error
}

// AuthServiceMockRefreshOrigins contains origins of expectations of the AuthService.Refresh
type AuthServiceMockRefreshExpectationOrigins struct {
	origin             string
	originIp           string
	originRefreshToken string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRefresh *mAuthServiceMockRefresh) Optional() *mAuthServiceMockRefresh {
	mmRefresh.optional = true
	return mmRefresh
}

// Expect sets up expected params for AuthService.Refresh
func (mmRefresh *mAuthServiceMockRefresh) Expect(ip string, refreshToken string) *mAuthServiceMockRefresh {
	if mmRefresh.mock.funcRefresh != nil {
		mmRefresh.mock.t.Fatalf("AuthServiceMock.Refresh mock is already set by Set")
	}

	if mmRefresh.defaultExpectation == nil {
		mmRefresh.defaultExpectation = &AuthServiceMockRefreshExpectation{}
	}

	if mmRefresh.defaultExpectation.paramPtrs != nil {
		mmRefresh.mock.t.Fatalf("AuthServiceMock.Refresh mock is already set by ExpectParams functions")
	}

	mmRefresh.defaultExpectation.params = &AuthServiceMockRefreshParams{ip, refreshToken}
	mmRefresh.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmRefresh.expectations {
		if minimock.Equal(e.params, mmRefresh.defaultExpectation.params) {
			mmRefresh.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRefresh.defaultExpectation.params)
		}
	}

	return mmRefresh
}

// ExpectIpParam1 sets up expected param ip for AuthService.Refresh
func (mmRefresh *mAuthServiceMockRefresh) ExpectIpParam1(ip string) *mAuthServiceMockRefresh {
	if mmRefresh.mock.funcRefresh != nil {
		mmRefresh.mock.t.Fatalf("AuthServiceMock.Refresh mock is already set by Set")
	}

	if mmRefresh.defaultExpectation == nil {
		mmRefresh.defaultExpectation = &AuthServiceMockRefreshExpectation{}
	}

	if mmRefresh.defaultExpectation.params != nil {
		mmRefresh.mock.t.Fatalf("AuthServiceMock.Refresh mock is already set by Expect")
	}

	if mmRefresh.defaultExpectation.paramPtrs == nil {
		mmRefresh.defaultExpectation.paramPtrs = &AuthServiceMockRefreshParamPtrs{}
	}
	mmRefresh.defaultExpectation.paramPtrs.ip = &ip
	mmRefresh.defaultExpectation.expectationOrigins.originIp = minimock.CallerInfo(1)

	return mmRefresh
}

// ExpectRefreshTokenParam2 sets up expected param refreshToken for AuthService.Refresh
func (mmRefresh *mAuthServiceMockRefresh) ExpectRefreshTokenParam2(refreshToken string) *mAuthServiceMockRefresh {
	if mmRefresh.mock.funcRefresh != nil {
		mmRefresh.mock.t.Fatalf("AuthServiceMock.Refresh mock is already set by Set")
	}

	if mmRefresh.defaultExpectation == nil {
		mmRefresh.defaultExpectation = &AuthServiceMockRefreshExpectation{}
	}

	if mmRefresh.defaultExpectation.params != nil {
		mmRefresh.mock.t.Fatalf("AuthServiceMock.Refresh mock is already set by Expect")
	}

	if mmRefresh.defaultExpectation.paramPtrs == nil {
		mmRefresh.defaultExpectation.paramPtrs = &AuthServiceMockRefreshParamPtrs{}
	}
	mmRefresh.defaultExpectation.paramPtrs.refreshToken = &refreshToken
	mmRefresh.defaultExpectation.expectationOrigins.originRefreshToken = minimock.CallerInfo(1)

	return mmRefresh
}

// Inspect accepts an inspector function that has same arguments as the AuthService.Refresh
func (mmRefresh *mAuthServiceMockRefresh) Inspect(f func(ip string, refreshToken string)) *mAuthServiceMockRefresh {
	if mmRefresh.mock.inspectFuncRefresh != nil {
		mmRefresh.mock.t.Fatalf("Inspect function is already set for AuthServiceMock.Refresh")
	}

	mmRefresh.mock.inspectFuncRefresh = f

	return mmRefresh
}

// Return sets up results that will be returned by AuthService.Refresh
func (mmRefresh *mAuthServiceMockRefresh) Return(ap1 *models.AuthResponse, err error) *AuthServiceMock {
	if mmRefresh.mock.funcRefresh != nil {
		mmRefresh.mock.t.Fatalf("AuthServiceMock.Refresh mock is already set by Set")
	}

	if mmRefresh.defaultExpectation == nil {
		mmRefresh.defaultExpectation = &AuthServiceMockRefreshExpectation{mock: mmRefresh.mock}
	}
	mmRefresh.defaultExpectation.results = &AuthServiceMockRefreshResults{ap1, err}
	mmRefresh.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRefresh.mock
}

// Set uses given function f to mock the AuthService.Refresh method
func (mmRefresh *mAuthServiceMockRefresh) Set(f func(ip string, refreshToken string) (ap1 *models.AuthResponse, err error)) *AuthServiceMock {
	if mmRefresh.defaultExpectation != nil {
		mmRefresh.mock.t.Fatalf("Default expectation is already set for the AuthService.Refresh method")
	}

	if len(mmRefresh.expectations) > 0 {
		mmRefresh.mock.t.Fatalf("Some expectations are already set for the AuthService.Refresh method")
	}

	mmRefresh.mock.funcRefresh = f
	mmRefresh.mock.funcRefreshOrigin = minimock.CallerInfo(1)
	return mmRefresh.mock
}

// When sets expectation for the AuthService.Refresh which will trigger the result defined by the following
// Then helper
func (mmRefresh *mAuthServiceMockRefresh) When(ip string, refreshToken string) *AuthServiceMockRefreshExpectation {
	if mmRefresh.mock.funcRefresh != nil {
		mmRefresh.mock.t.Fatalf("AuthServiceMock.Refresh mock is already set by Set")
	}

	expectation := &AuthServiceMockRefreshExpectation{
		mock:               mmRefresh.mock,
		params:             &AuthServiceMockRefreshParams{ip, refreshToken},
		expectationOrigins: AuthServiceMockRefreshExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmRefresh.expectations = append(mmRefresh.expectations, expectation)
	return expectation
}

// Then sets up AuthService.Refresh return parameters for the expectation previously defined by the When method
func (e *AuthServiceMockRefreshExpectation) Then(ap1 *models.AuthResponse, err error) *AuthServiceMock {
	e.results = &AuthServiceMockRefreshResults{ap1, err}
	return e.mock
}

// Times sets number of times AuthService.Refresh should be invoked
func (mmRefresh *mAuthServiceMockRefresh) Times(n uint64) *mAuthServiceMockRefresh {
	if n == 0 {
		mmRefresh.mock.t.Fatalf("Times of AuthServiceMock.Refresh mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRefresh.expectedInvocations, n)
	mmRefresh.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRefresh
}

func (mmRefresh *mAuthServiceMockRefresh) invocationsDone() bool {
	if len(mmRefresh.expectations) == 0 && mmRefresh.defaultExpectation == nil && mmRefresh.mock.funcRefresh == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRefresh.mock.afterRefreshCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRefresh.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Refresh implements mm_service.AuthService
func (mmRefresh *AuthServiceMock) Refresh(ip string, refreshToken string) (ap1 *models.AuthResponse, err error) {
	mm_atomic.AddUint64(&mmRefresh.beforeRefreshCounter, 1)
	defer mm_atomic.AddUint64(&mmRefresh.afterRefreshCounter, 1)

	mmRefresh.t.Helper()

	if mmRefresh.inspectFuncRefresh != nil {
		mmRefresh.inspectFuncRefresh(ip, refreshToken)
	}

	mm_params := AuthServiceMockRefreshParams{ip, refreshToken}

	// Record call args
	mmRefresh.RefreshMock.mutex.Lock()
	mmRefresh.RefreshMock.callArgs = append(mmRefresh.RefreshMock.callArgs, &mm_params)
	mmRefresh.RefreshMock.mutex.Unlock()

	for _, e := range mmRefresh.RefreshMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmRefresh.RefreshMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRefresh.RefreshMock.defaultExpectation.Counter, 1)
		mm_want := mmRefresh.RefreshMock.defaultExpectation.params
		mm_want_ptrs := mmRefresh.RefreshMock.defaultExpectation.paramPtrs

		mm_got := AuthServiceMockRefreshParams{ip, refreshToken}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ip != nil && !minimock.Equal(*mm_want_ptrs.ip, mm_got.ip) {
				mmRefresh.t.Errorf("AuthServiceMock.Refresh got unexpected parameter ip, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRefresh.RefreshMock.defaultExpectation.expectationOrigins.originIp, *mm_want_ptrs.ip, mm_got.ip, minimock.Diff(*mm_want_ptrs.ip, mm_got.ip))
			}

			if mm_want_ptrs.refreshToken != nil && !minimock.Equal(*mm_want_ptrs.refreshToken, mm_got.refreshToken) {
				mmRefresh.t.Errorf("AuthServiceMock.Refresh got unexpected parameter refreshToken, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRefresh.RefreshMock.defaultExpectation.expectationOrigins.originRefreshToken, *mm_want_ptrs.refreshToken, mm_got.refreshToken, minimock.Diff(*mm_want_ptrs.refreshToken, mm_got.refreshToken))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRefresh.t.Errorf("AuthServiceMock.Refresh got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmRefresh.RefreshMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRefresh.RefreshMock.defaultExpectation.results
		if mm_results == nil {
			mmRefresh.t.Fatal("No results are set for the AuthServiceMock.Refresh")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmRefresh.funcRefresh != nil {
		return mmRefresh.funcRefresh(ip, refreshToken)
	}
	mmRefresh.t.Fatalf("Unexpected call to AuthServiceMock.Refresh. %v %v", ip, refreshToken)
	return
}

// RefreshAfterCounter returns a count of finished AuthServiceMock.Refresh invocations
func (mmRefresh *AuthServiceMock) RefreshAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRefresh.afterRefreshCounter)
}

// RefreshBeforeCounter returns a count of AuthServiceMock.Refresh invocations
func (mmRefresh *AuthServiceMock) RefreshBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRefresh.beforeRefreshCounter)
}

// Calls returns a list of arguments used in each call to AuthServiceMock.Refresh.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRefresh *mAuthServiceMockRefresh) Calls() []*AuthServiceMockRefreshParams {
	mmRefresh.mutex.RLock()

	argCopy := make([]*AuthServiceMockRefreshParams, len(mmRefresh.callArgs))
	copy(argCopy, mmRefresh.callArgs)

	mmRefresh.mutex.RUnlock()

	return argCopy
}

// MinimockRefreshDone returns true if the count of the Refresh invocations corresponds
// the number of defined expectations
func (m *AuthServiceMock) MinimockRefreshDone() bool {
	if m.RefreshMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RefreshMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RefreshMock.invocationsDone()
}

// MinimockRefreshInspect logs each unmet expectation
func (m *AuthServiceMock) MinimockRefreshInspect() {
	for _, e := range m.RefreshMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthServiceMock.Refresh at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterRefreshCounter := mm_atomic.LoadUint64(&m.afterRefreshCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RefreshMock.defaultExpectation != nil && afterRefreshCounter < 1 {
		if m.RefreshMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthServiceMock.Refresh at\n%s", m.RefreshMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthServiceMock.Refresh at\n%s with params: %#v", m.RefreshMock.defaultExpectation.expectationOrigins.origin, *m.RefreshMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRefresh != nil && afterRefreshCounter < 1 {
		m.t.Errorf("Expected call to AuthServiceMock.Refresh at\n%s", m.funcRefreshOrigin)
	}

	if !m.RefreshMock.invocationsDone() && afterRefreshCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthServiceMock.Refresh at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RefreshMock.expectedInvocations), m.RefreshMock.expectedInvocationsOrigin, afterRefreshCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuthServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockLoginInspect()

			m.MinimockRefreshInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuthServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuthServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockLoginDone() &&
		m.MinimockRefreshDone()
}
